{
  "name": "geoFenceRoute",
  "version": "0.0.5",
  "type": "sensor",
  "script": "/*var options = __.extend(options, {\n    rawData : {\n    \"GLOBAL\":{\n            \"latitude\":\"51.12\",\n            \"longitude\":\"3.51\"\n        }\n    }\n})*/\n\n/*\nroute in format\nit must be ordered the way object move along the path\nvar route = [{longitude: 3, latitude:52}] \n*/\nvar route = options.requiredProperties.route;\n//route = [{longitude: 3, latitude:52}, {longitude: 3.51, latitude:52}, {longitude: 3.58, latitude:52.1}, {longitude: 3.6, latitude:52}]; \n\nif (!Array.isArray(route)){\n    route = JSON.parse(route)\n    if (!Array.isArray(route)){\n        send(new Error('routes should be array'))\n    }\n}\n\n\nvar getMiddlePoints = function(array){\n    var middlePoints = [];\n    for(i=0; i <array.lenght/2-1; i++){\n        middlePoints.push({ \n            longitude : (array[2*i].longitude + array[2*i+1].longitude)/2,\n            latitude : (array[2*i].latitude + array[2*i+1].latitude)/2,\n        });\n    }\n    return middlePoints;\n}\n\nvar runtimeLatitude, runtimeLongitude;\n\nvar sendDistance = function(){\n    console.log(\"sendDistance\")\n    var state = \"OUT\";\n    var dist;\n    var minDistance = 100000000;\n    try {\n    _.each(_.union(route, getMiddlePoints(route)), function(point){\n        console.log(JSON.stringify(point))\n        dist = waylayUtil.getDistance(point.latitude, point.longitude, runtimeLatitude, runtimeLongitude);\n        console.log(dist)\n        if(minDistance > dist)\n            minDistance = dist;\n        if(dist < parseFloat(options.requiredProperties.distance)){\n            throw \"Found distance\";   \n        }\n    })} catch(e){\n        console.log(e)\n        state = \"IN\";\n    }\n    \n    var value = {\n        observedState: state,\n        rawData: {  \n            distance: minDistance, \n            distanceConfigured: parseFloat(options.requiredProperties.distance),\n            latitude: runtimeLatitude, \n            longitude: runtimeLongitude,  \n        }\n    };\n    send(null, value);\n};\n\ntry{\n    runtimeLatitude = parseFloat(waylayUtil.getStreamData(options, \"latitude\"));\n    runtimeLongitude = parseFloat(waylayUtil.getStreamData(options, \"longitude\"));  \n    if(!runtimeLatitude || !runtimeLongitude){\n        send(new Error(\"runtime location not available\"));\n} else{\n    try{\n        sendDistance()\n    } catch(err){\n        console.log(\"ERROR\");\n        send(new Error(\"calling mashape endpoint\"));\n    }\n}\n\n} catch(err){\n    send(new Error(err));\n}\n",
  "metadata": {
    "author": "",
    "category": "Location",
    "description": "geoFence calculator based on the runtime location and input route.\n<br>\nInput arguments are:\n<ul>\n<li>route in format: [{longitude: 3, latitude:52}, {longitude: 3.51, latitude:52}, {longitude: 3.58, latitude:52.1}, {longitude: 3.6, latitude:52}]</li>\n<li>distance from the route in km</li>\n</ul>\nRuntime location must include longitude and latitude.\n",
    "iconURL": "https://static.waylay.io/plugs/icons/route.png",
    "supportedStates": [
      "IN",
      "OUT"
    ],
    "requiredProperties": [
      "distance",
      "route"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "distance",
        "dataType": "string"
      }
    ]
  }
}
