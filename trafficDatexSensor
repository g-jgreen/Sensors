{
    "name": "trafficDatexSensor",
    "version": "0.0.4",
    "type": "sensor",
    "script": "var city = options.requiredProperties.city || 'Gent';\nvar radius = options.requiredProperties.radius || 15;\nvar API_KEY = options.globalSettings.MASHAPE_KEY;\nvar latitude = waylayUtil.getCacheData(options,\"latitude\");\nvar longitude = waylayUtil.getCacheData(options,\"longitude\");\nvar incidents = [\"AbnormalTraffic\", \"VehicleObstruction\", \"AccidentType\"];\n//var incidents = [\"VehicleObstruction\", \"AccidentType\"];\n\nvar spacecamel = function (s){\n    return s.replace(/([A-Z])/g, ' $1')\n    // uppercase the first character\n    .replace(/^./, function(str){ return str.toUpperCase(); })\n}\n\nvar friendlyMessage = function(time, type, detail, locations){\n    return \"Since \" + time.toLocaleTimeString() + \" \" + spacecamel(detail) + \" at \" +locations.join(\",\");\n}\n\nvar getAllPOIs = function(latitude, longitude) {\n    try{\n    var url = \"http://traffic.waylay.io:8088/\";\n    request({\n            \"uri\": url\n        }, function(err, response, body){\n            if (!err && response.statusCode == 200) {\n                var data = JSON.parse(body);\n                //console.log(data);\n                var roadIssues = [];\n                var filteredData = __.filter(data, function(poi) {\n                    var dist = waylayUtil.getDistance(latitude, longitude, poi.centralLatLng[0], poi.centralLatLng[1]);\n                    var records = __.filter(poi.records, function(record) {\n                        if(__.contains(incidents, record.name))\n                            return record;\n                    });\n                    console.log(poi);\n                    console.log(\"distance=\" +dist + \"km, records length=\"+records.length);\n                    return  dist < radius && records.length > 0;\n                });\n                console.log(filteredData);\n                __.each(filteredData, function(poi){\n                    __.each(poi.records, function(record) {\n                        console.log(record);\n                        if(__.contains(incidents, record.name)){\n                            var locations = [];\n                            __.each(record.locations, function(location){\n                                __.each(location.names, function(name){\n                                    locations.push(name);\n                                });\n                            });\n                            var time = new Date(record.startTime);\n                            var dataToAdd = { time: time, type: record.name, detail : record.detail, locations: __.uniq(locations), text : friendlyMessage(time, record.type, record.detail, locations)};\n                            roadIssues.push(dataToAdd);\n                        }\n                    });\n                });\n                var rawData = { roadIssues : roadIssues, latitude: latitude, longitude:longitude, radius : radius, data:data};\n                var value ={\n                    observedState : \"Found\",\n                    rawData : rawData\n                }\n               send(null, value);\n            } else {\n                console.log(response);\n                send(new Error(response.statusCode));\n            }\n    });    \n    } catch(err){\n        send(new Error(err));\n    }\n};\n\n\nif(latitude === undefined || longitude === undefined) {\n    if(API_KEY !== undefined){\n        unirest.get(\"https://montanaflynn-geocoder.p.mashape.com/address?address=\"+options.requiredProperties.city).header(\"X-Mashape-Key\", API_KEY).end(function (result) {\n        try{\n            console.log(result.body);\n            latitude = result.body[\"latitude\"];\n            longitude = result.body[\"longitude\"];\n            getAllPOIs(latitude, longitude);\n        } catch(err){\n            send(new Error(err));\n        }\n        });\n    } else {\n        console.log(\"used default location Gent\");\n        latitude = 51.0538286;\n        longitude = 3.7250121;\n        getAllPOIs(latitude, longitude);  \n    }\n} else {\n    getAllPOIs(latitude, longitude);\n}\n",
    "metadata": {
        "author": "",
        "category": "Smart City",
        "description": "Reports the road issues. \nCurrent incidents reported are:\n<ul>\n<li>VehicleObstruction</li>\n<li>AccidentType</li>\n</ul>",
        "documentationURL": "",
        "iconURL": "https://raw.githubusercontent.com/waylayio/documentation/master/icons/traffic.png",
        "supportedStates": [
            "Found",
            "Not Found"
        ],
        "requiredProperties": [
            "city",
            "radius"
        ],
        "requiredRawData": [],
        "rawData": [
            {
                "parameter": "roadIssues",
                "dataType": "Object[]"
            }
        ]
    }
}
