{
  "name": "getTravelTimes",
  "version": "0.0.7",
  "type": "sensor",
  "script": "var url = \"https://dynacity.be-mobile.biz/traveltimes.json\";\nvar to = options.requiredProperties.to || \"B401\";\nvar from = options.requiredProperties.from || \"B401\";\n//Threshold im minutes\nvar DELAY_THRESHOLDS = {\n    LOW: 10,\n    MEDIUM : 30\n}\n\ntry{\n    request({\n        \"uri\": url\n    }, function(err, response, body){\n        if (!err && response && response.statusCode == 200) {\n            var data = JSON.parse(body);\n            var features = data.features;\n            var travelTimes = _.map(features, function (feature) {\n               var attributes = feature.properties.attributes;\n               var from = _.find(attributes, function(a) {return a.attributeName === 'FromName'}).value;\n               var to = _.find(attributes, function(a) {return a.attributeName === 'ToName'}).value;\n               var totalActualTime= _.find(attributes, function(a) {return a.attributeName === 'TotalActualTt'}).value;\n               var totalOptimalTime = _.find(attributes, function(a) {return a.attributeName === 'TotalOptimalTt'}).value;\n               var totalDelay = _.find(attributes, function(a) {return a.attributeName === 'TotalDelay'}).value;\n               var delaySeverity = _.find(attributes, function(a) {return a.attributeName === 'DelaySeverity'}).value;\n               var length = _.find(attributes, function(a) {return a.attributeName === 'Length'}).value;\n               return {\n                   description: feature.properties.description,\n                   from: from,\n                   to: to,\n                   totalActualTime: totalActualTime,\n                   totalOptimalTime: totalOptimalTime,\n                   totalDelay: totalDelay,\n                   delaySeverity: delaySeverity,\n                   length: length\n               }\n            });\n            var path = _.find(travelTimes, function(t){return t.from == from && to == to});\n            var delay = parseFloat(path.totalDelay) / 60;\n            var state = \"Good\";\n            if(delay > DELAY_THRESHOLDS.LOW)\n                state = \"Bad\";\n            if(delay > DELAY_THRESHOLDS.MEDIUM)\n                state = \"Terrible\";\n            console.log(delay)\n            console.log(JSON.stringify(path))\n            var rawData = { \n                travelTimes: travelTimes,\n                delay : path.totalDelay\n            }\n            send(null, {observedState: state, rawData: rawData});\n        } else {\n            console.log(response);\n            send(new Error(err));\n        }\n    });\n} catch(err){\n    send(new Error(err)); \n}\n\n",
  "metadata": {
    "author": "",
    "category": "VIM",
    "description": "",
    "iconURL": "https://lh3.ggpht.com/VjPLdYTjQPJkKrqsdj7MlgvI6UDQHcN9NAciZys0N8Nwu-RV8zq4w-k9Edy4a1gCe4G1=w300",
    "supportedStates": [
      "Good",
      "Bad",
      "Terrible"
    ],
    "requiredProperties": [
      "from",
      "to"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "travelTimes",
        "dataType": "string"
      },
      {
        "parameter": "delay",
        "dataType": "integer"
      }
    ]
  }
}
