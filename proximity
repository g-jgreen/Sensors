{
    "name": "proximity",
    "version": "1.0.2",
    "type": "sensor",
    "script": "/*var options = __.extend(options, {\n    rawData : {\n        \"node1\":{\n            \"latitude\":\"51\",\n            \"longitude\":\"3.71\"\n        },\"GLOBAL\":{\n            \"latitude\":\"51.12\",\n            \"longitude\":\"3.51\"\n        }\n    }\n});*/\n\n//runtime data\nvar latRuntime = waylayUtil.getStreamData(options,\"latitude\");\nvar lonRuntime =  waylayUtil.getStreamData(options,\"longitude\");\nvar node = options.requiredProperties.node;\nif(latRuntime === undefined || lonRuntime === undefined){\n    send(new Error(\"now runtime data\"));\n} else {\n    if( ((options.requiredProperties.latitudeConfigured !== undefined && options.requiredProperties.longitudeConfigured !== undefined) || node !== undefined) \n        && options.requiredProperties.distance !== undefined) {\n    // take first runtime from global, that way you don't need to define a node that has raw data.\n    // if you have more than one node that produces geo data, you should not do this\n    var latConfigured = options.requiredProperties.latitudeConfigured;\n    var lonConfigured = options.requiredProperties.longitudeConfigured;\n    if(options.requiredProperties.node){\n        latConfigured = waylayUtil.getRawData(options, node, \"latitude\");\n        lonConfigured = waylayUtil.getRawData(options, node, \"longitude\");\n    } \n    var dist = waylayUtil.getDistance(latRuntime,lonRuntime, latConfigured, lonConfigured);\n    if(!isNaN(dist)){\n        var value = {\n            observedState: dist > options.requiredProperties.distance ? \"OUT\" : \"IN\",\n            rawData: {  \n                distance: dist, \n                distanceConfigured: options.requiredProperties.distance,\n                latitude: latRuntime, \n                longitude: lonRuntime,  \n                latitudeConfigured:  latConfigured, \n                longitudeConfigured: lonConfigured\n            }\n        };\n        send(null, value);\n    } else {\n        send(new Error(\"Error computing the distance\"));\n    }\n    } else{\n      send(new Error(\"Missing properties\"));\n    }\n}\n    ",
    "metadata": {
        "author": "",
        "category": "Location",
        "description": "Proximity sensor that compares stream location with a reference location, either fixed location\nthat is defined as properties or if it comes from anohter node\nthat has rawData location and latitude. \n\nInput arguments are:\n<ul>\n<li>node: if provided, sensor node which provides the reference location (latitude/longitude properties in returned raw data)</li>\n<li>latitudeConfigured: latitude of the reference location from which you want to set out a perimeter</li>\n<li>longitudeConfigured: longitude of the reference location from which you want to set out a perimeter</li>\n<li>distance: proximity perimeter radius around the reference location defined by the node or configured reference location</li>\n</ul>\n\n\nRaw data:\n<ul>\n<li>distance, the actual distance between the streamed location and then reference location</li>\n<li>latitude, streamed latitude</li>\n<li>longitude, streamed longitude</li>\n<li>latitudeConfigured</li>\n<li>longitudeConfigured</li>\n<li>distanceConfigured, what you provided in as sensor property</li>\n</ul>\n",
        "iconURL": "https://static.waylay.io/plugs/icons/location.png",
        "supportedStates": [
            "IN",
            "OUT"
        ],
        "requiredProperties": [
            "node",
            "distance",
            "latitudeConfigured",
            "longitudeConfigured"
        ],
        "requiredRawData": [],
        "rawData": [
            {
                "parameter": "distance",
                "dataType": "string"
            },
            {
                "parameter": "latitude",
                "dataType": "double"
            },
            {
                "parameter": "longitude",
                "dataType": "double"
            },
            {
                "parameter": "latitudeConfigured",
                "dataType": "double"
            },
            {
                "parameter": "longitudeConfigured",
                "dataType": "double"
            },
            {
                "parameter": "distanceConfigured",
                "dataType": "double"
            }
        ]
    }
}
