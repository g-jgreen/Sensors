{
    "name": "RetrieveHeadNodeSensors",
    "version": "0.3.4",
    "type": "sensor",
    "script": "var authorizationToken, headNode;\nif (__.isEmpty(options.requiredProperties.authorizationToken)) {\n    authorizationToken = options.globalSettings.synfield_guest_authorizationToken;\n} else {\n        authorizationToken = options.requiredProperties.authorizationToken;\n    \n}\n\nif (__.isEmpty(options.requiredProperties.headNode)) {\n    send(new Error('Please enter value for headNode.'));\n} else {\n        try {\n        headNode = waylayUtil.getRawData(options, options.requiredProperties.headNode);\n    } catch (err) {\n        headNode = options.requiredProperties.headNode;\n    }\n}\n\nvar url = ' http://api-synfield.synelixis.com/v1/gateway/' + headNode + '/sensors/';\n\ntry{\n    request({\n            'uri': url,\n            'headers' : {\n                'Authorization' : authorizationToken,\n                'Accept' : 'application/json'\n            }\n    }, function(err, response, body){\n        \n        if (!err && response.statusCode == 200) {\n                var data = JSON.parse(body), sensors = data.response.sensors;\n               var sensorsIDs = [], sensorsServices = [], sensorsNames =[], sensorsStr = [];\n               \n                \n                for (var i = 0; i < sensors.length; i++) {\n                    sensorsIDs.push(sensors[i].id);\n                    sensorsServices.push(sensors[i].service);\n                    sensorsNames.push(sensors[i].name);\n                    sensorsStr.push(sensors[i].id);\n                    sensorsStr.push(sensors[i].name);\n                    sensorsStr.push(sensors[i].service);\n                    sensorsStr.push(sensors[i].enabled);\n                }\n                \n                namesStr = sensorsNames.join(', ');\n                servicesStr = sensorsServices.join(', ');\n                idsStr = sensorsIDs.join(', ');\n                sensorsStr = sensorsStr.join(', ');\n                \n                var value = {\n                    observedState : 'Found',\n                    rawData : {\n                        sensors : sensors,\n                        namesStr : namesStr,\n                        servicesStr : servicesStr,\n                        idsStr : idsStr,\n                        sensorsStr : sensorsStr\n                    }\n                };\n               send(null, value);\n            } else {\n                console.log(response);\n                send(new Error(\"Could not load the url\" + url + \" , got the error \" + err));\n            }\n    });    \n} catch(err){\n    send(new Error(err));\n}",
    "metadata": {
        "author": "Dan Dan",
        "category": "SynField",
        "description": "Retrieve a collection of installed sensors in the Head Node (gateway).<br>\nEndpoint: http://api-synfield.synelixis.com//v1/gateway/{gatewayID}/sensors/<br>\n\n<b>States</b>\n<ul>\n<li>Found: when an owner's sensors are found.</li>\n<li>Not Found</li>\n</ul><br>\n\n<b>Properties</b>\n<ul>\n<li>authorizationToken (e.g. Basic Z3Vlc3Q...) (if undefined, property or globalSettings)</li>\n<li>headNode (gateway) (e.g. 00:06:66...) (required, rawData or property)</li>\n</ul><br>\n\n<b>Raw Data</b>\n<ul>\n<li>sensors[] - array of sensor objects {id:,name:,service:,enabled:}</li>\n<li>sensorsStr - string of sensors: id,name,service,enabled,id,name,service,enabled,...</li>\n<li>idsStr - String of sensor IDs separated by commas</li>\n<li>namesStr - String of sensor names separated by commas</li>\n<li>servicesStr - String of sensor services separated by commas</li>\n</ul><br>",
        "documentationURL": "http://www.synelixis.com/synfield/",
        "iconURL": "http://www.micronzindia.com/mic_images/mic_icon_organic.png",
        "supportedStates": [
            "Found",
            "Not Found"
        ],
        "requiredProperties": [
            "authorizationToken",
            "headNode"
        ],
        "requiredRawData": [],
        "rawData": [
            {
                "parameter": "sensors",
                "dataType": "string[]"
            },
            {
                "parameter": "idsStr",
                "dataType": "double"
            },
            {
                "parameter": "namesStr",
                "dataType": "double"
            },
            {
                "parameter": "servicesStr",
                "dataType": "double"
            },
            {
                "parameter": "sensorsStr",
                "dataType": "double"
            }
        ]
    }
}