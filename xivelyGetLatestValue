{
    "name": "xivelyGetLatestValue",
    "version": "1.0.1",
    "type": "sensor",
    "script": "/*\nExample: for air quality in Gent\nfeed: 2005839140\nid: PM2_5\n*/\n\nvar id = options.requiredProperties.id || options.node.RESOURCE || options.task.RESUOURCE;\n\nvar threshold =  options.requiredProperties.threshold;\nvar key = options.globalSettings.XIVELY_KEY;\n\nif(id !== undefined && threshold !== undefined && key !== undefined){\n    \n    var httpOptions = {\n        url: 'https://api.xively.com/v2/feeds/' + options.requiredProperties.feed,\n        headers :{\n           'X-ApiKey': key \n        }\n    };\n    request(httpOptions, function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            var var1 = JSON.parse(body);\n            logger.info(var1);\n            var data = __.find(var1.datastreams, function(d){\n                return (d.id === id);\n            });\n            if(data !== undefined) {\n                data.collectedTime = new Date(data.at).getTime();\n                data.current_value = parseFloat(data.current_value);\n                data.min_value = parseFloat(data.min_value);\n                data.max_value = parseFloat(data.max_value);\n                data.threshold = threshold;\n                var raw = {};\n                if(data.current_value > threshold)\n                    raw.icon = \"https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png\";\n                else\n                    raw.icon = \"https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png\";\n                if(var1.location && var1.location.lat && var1.location.lon){\n                    raw.latitude = var1.location.lat;\n                    raw.longitude = var1.location.lon;\n                }\n                __.map(var1.datastreams, function(data){\n                    raw[data.id+'_current_value'] = parseFloat(data.current_value);\n                    raw[data.id+'_min_value'] = parseFloat(data.min_value);\n                    raw[data.id+'_max_value'] = parseFloat(data.max_value);\n                    //raw[data.id+'_collectedTime'] = new Date(data.at).getTime();\n                });\n                console.log(raw);\n                value = {  \n                    observedState:  data.current_value > threshold ? \"Above\": \"Below\", \n                    rawData : raw \n                }; \n                send(null, value);\n            } else {\n                send(new Error(\"data for id \"  + id + \" not found\"));\n            }\n        }\n    });\n}else {\n  send(new Error(\"Missing properties\"));\n}",
    "metadata": {
        "author": "",
        "category": "IOT Platforms",
        "description": "Xively sensor. You need xively API key to run it.\n<br>\nInput parameters are:\n<ul>\n<li>feed</li>\n<li>id, that is parameter on which you want to do the threshold crossing</li>\n<li>threshold</li>\n</ul>\n\n<br>\nExample: for air quality in Gent\n<ul>\n<li>feed: 2005839140</li>\n<li>id: PM2_5</li>\n</ul>\n\nRaw data output is return object\n",
        "iconURL": "https://raw.githubusercontent.com/waylayio/documentation/master/icons/xively.png",
        "supportedStates": [
            "Above",
            "Below"
        ],
        "requiredProperties": [
            "feed",
            "id",
            "threshold"
        ],
        "requiredRawData": [],
        "rawData": []
    }
}
