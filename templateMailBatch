{
  "name": "templateMailBatch",
  "version": "0.0.1",
  "type": "actuator",
  "script": "/*\ne-mail input can as well be the sensor that retuns e-mail in rawData in format {e-mail : \"example@gmail.com\"}.\nIn that case you need to put in options.requiredProperties.to a sensor name\n*/\nvar e_mail;\ntry{\n    e_mail= waylayUtil.evaluateData(options, options.requiredProperties.to);    \n} catch(err){\n    console.log(err);\n}\n\nvar TO = e_mail || options.requiredProperties.to;\nvar TO_LIST = TO.split(',')\nconsole.log(TO_LIST)\nvar REPLY_TO = options.requiredProperties.reply || options.requiredProperties.from;\n\nvar sendMail = function(sendTo, chunks) {\n    var deferred = Q.defer();\n    var message = {\n        key: options.globalSettings.MANDRILL_KEY,\n        send_at:  options.requiredProperties.send_at,\n        message: {\n                html: waylayUtil.template(options, options.requiredProperties.message),\n                subject:  waylayUtil.template(options, options.requiredProperties.subject),\n                from_email: options.requiredProperties.from,\n                from_name: options.requiredProperties.from,\n                to: [\n                    {\n                        email: sendTo,\n                        name: sendTo,\n                        type: \"to\"\n                    }\n                ],\n                headers: {\n                    \"Reply-To\": REPLY_TO\n                }\n            }\n        };\n         var requestOptions = {\n          url: 'https://mandrillapp.com/api/1.0/messages/send.json\"',\n          json: message\n        };\n        if(chunks){\n            var data = new Buffer.concat(chunks);\n            console.log(\"add attachment\")\n            message.message.attachments = [\n                {\n                    name : \"Attachment.pdf\",\n                    type : \"application/pdf\",\n                    content: data.toString(\"base64\")\n                }\n            ]\n        }\n        request.post(requestOptions, function (error, response, body) {\n          if (!error && response.statusCode == 200) {\n            console.log(body);\n            if(body[0] && body[0].status && body[0].status == 'rejected')\n                 deferred.reject(JSON.stringify(body));\n            else\n                deferred.resolve();\n          }else{\n              deferred.reject(JSON.stringify(response));\n          }\n    });\n    return deferred.promise\n}\n\nif(options.globalSettings.MANDRILL_KEY === undefined || options.requiredProperties.message === undefined ||\n    options.requiredProperties.subject === undefined || options.requiredProperties.from === undefined || \n    TO === undefined){\n        send(new Error(\"Error missing properties\"));\n    }\nelse {\n    if(waylayUtil.validateEmail(options.requiredProperties.from)){\n        var pdf = options.requiredProperties.pdfURL;\n        var promises = TO_LIST.map(function(sendTO) {\n            var deferred = Q.defer();\n            sendTO = sendTO.trim()\n            if(!waylayUtil.validateEmail(sendTO) || sendTO === \"\") {\n                deferred.reject(new Error(\"invalid or empty email in list\"))\n                return deferred.promise\n            }\n            if(pdf){\n                request(pdf)\n                .on('response', function(response) {\n                    var chunks = [];\n                    response.on('data', function(chunk){\n                        chunks.push(chunk);\n                    });\n                    response.on('end', function(){\n                         return sendMail(sendTO,chunks);\n                    });\n                    response.on('error', function(){\n                         deferred.reject(new Error(\"error\"));\n                    });\n                });\n            }else{\n                console.log('sent email')\n                return sendMail(sendTO);\n            }\n            return deferred.promise\n        })\n        Q.all(promises).then(function() {\n            send()\n        }).fail(function(err){\n            send(new Error(\"Could not send mails: \" + err))\n        })\n    } else {\n        var message = \"Emails are not valid: to=\" + TO + \", from=\" + options.requiredProperties.from;\n        console.log(message);\n        send(new Error(message));\n    }\n}\n\n      ",
  "metadata": {
    "author": "",
    "category": "Mail",
    "description": "Batch Mail actuator.\nMessage and subject are parsed using waylayUtil.template function.\n\nInput parameters are:\n<ul>\n<li>from (make sure you have registered domain)</li>\n<li>to (comma seperated list)</li>\n<li>message</li>\n<li>subject</li>\n<li>reply (optional)</li>\n<li>send_at (optional), when this message should be sent as a UTC timestamp in YYYY-MM-DD HH:MM:SS format. If you specify a time in the past, the message will be sent immediately.</li>\n<li>pdfURL (optional), link to the pdf that will be attached to the mail</li>\n</ul>\n\nActuator requires <strong>MANDRILL_KEY</strong> in the global settings\n",
    "iconURL": "https://static.waylay.io/plugs/icons/mail.png",
    "supportedStates": [],
    "requiredProperties": [
      "from",
      "to",
      "message",
      "subject",
      "reply",
      "send_at",
      "pdfURL"
    ],
    "requiredRawData": []
  }
}
