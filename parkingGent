{
  "name": "parkingGent",
  "version": "1.1.0",
  "type": "sensor",
  "script": "//array of parkings that are full from the previous check\nvar cacheFullParkings = waylayUtil.getCacheData(options, \"fullParkings\") || [];\nvar cacheLowCapacityParkings= waylayUtil.getCacheData(options, \"lowCapacityParkings\") || [];\n\nvar url =\"http://datatank.stad.gent/4/mobiliteit/bezettingparkeergaragesv11.json\";\nvar recommendations = [];\nvar fullParkings, listAvailiableParkings, listLowCapacityParkings, listFullParkings, listRemainFullParkings, listBackToAvailableParkings;\n\ntry{\n    request({\n        \"uri\": url\n    }, function(err, response, body){\n        if (!err && response.statusCode == 200) {\n            var data = JSON.parse(body);\n            console.log(data);\n            processData(data);\n        } else {\n            console.log(response);\n            send(new Error(response.statusCode));\n        }\n    });\n}   catch(err){\n        send(new Error(\"failed for fetching \"+url)); \n}\n           \n\n\nvar filterParking = function(parking){\n    var flag = ( __.contains(listAvailiableParkings, parking)  &&  (!__.contains(cacheFullParkings, parking) && !__.contains(cacheLowCapacityParkings, parking)) ) || \n               ( __.contains(listAvailiableParkings, parking)  &&  (__.contains(cacheFullParkings, parking) || __.contains(cacheLowCapacityParkings, parking) ) && \n                        !__.contains(listLowCapacityParkings, parking));\n    console.log(\"checking for \"+parking + \" is \" + flag);\n    return flag ;\n    \n}\n\n//this is really not clear to me,..\nvar isParkingOpen = function(parking) {\n    //return (!parking.full && parking.open && parking.availableCapacity !=\"VOL\" );\n    return (parking.availableCapacity !=\"VOL\" && parking.availableCapacity > 0);\n}\n\nvar processData = function(data){\n    var parkings = data.Parkings.parkings;\n    parkings = __.map(parkings, function(p) {\n        p.availCapPercentage = parseFloat(p.availableCapacity)/parseFloat(p.totalCapacity);\n        return p;\n    });\n    var availableParkings = __.filter(parkings, function(parking) {\n        return isParkingOpen(parking);\n    });\n    \n    fullParkings = __.filter(parkings, function(parking) {return !isParkingOpen(parking);});\n        \n    listAvailiableParkings = __.map(availableParkings, function(p) {return p.description});\n    listLowCapacityParkings = __.compact(__.map(availableParkings, function(p) {if(p.availCapPercentage < 0.15) return p.description}));\n    listFullParkings = __.map(fullParkings, function(p) {return p.description});\n    listRemainFullParkings = __.compact(__.map(listFullParkings, function(p) {\n        if(__.contains(cacheFullParkings, p.description) ) return p.description}));\n    listBackToAvailableParkings = __.union(__.compact(__.map(availableParkings, function(p) {\n        if(p.availCapPercentage > 0.15 && __.contains(cacheFullParkings, p.description) ) return p.description})), \n        __.compact(__.map(availableParkings, function(p) {\n        if(p.availCapPercentage > 0.15 && __.contains(cacheLowCapacityParkings, p.description) ) return p.description}))\n        );\n    listAlterntativeToAvailableParkings = __.union(listBackToAvailableParkings, \n        __.compact(__.map(availableParkings, function(p) {\n        if(p.availCapPercentage > 0.15 && !__.contains(cacheLowCapacityParkings, p.description) && \n        !__.contains(cacheFullParkings, p.description)) return p.description}))\n        );\n    \n    var state = \"OK\";\n    if(fullParkings.length > 0 && fullParkings.length <3)\n      state = \"MEDIUM\";\n    else if(fullParkings.length > 2)\n       state = \"CRITICAL\";\n    var rawData = { \n        fullParkings : listFullParkings, \n        availableParkings: listAvailiableParkings,\n        lowCapacityParkings: listLowCapacityParkings,\n        backToAvailableParkings : listBackToAvailableParkings,\n        remainFullParkings: listRemainFullParkings,\n        alterntativeAvailableParkings: listAlterntativeToAvailableParkings,\n        parkings: parkings\n    };\n    var value ={\n        observedState : state,\n        rawData : rawData\n    }\n   send(null, value);\n};\n",
  "metadata": {
    "author": "",
    "category": "Smart City",
    "description": "Parking fo sity Gent. If more than 3 parkings are full it returns CRITCAL state, and if\nthere are no full parkings it returns OK.\n\nIt returns as a raw data:\n<ul>\n<li>parkings, list of all parkings as an object</li>, \n<li>fullParkings, list of full parkings</li>, \n<li>availableParkings: list of availiable parkings</li>\n<li>lowCapacityParkings, list of parkings below 15%</li>\n<li>backToAvailableParkings, list of parkigs that are again free and above 15%</li>\n<li>remainFullParkings, list of parkigs that were full and are still full</li>\n<li>alterntativeAvailableParkings, list of parkings which are available and were not full or with low capacity before</li>\n</ul>\n",
    "documentationURL": "http://datatank.gent.be/Mobiliteitsbedrijf/Parkings11.jso",
    "iconURL": "https://static.waylay.io/plugs/icons/parking.png",
    "supportedStates": [
      "OK",
      "MEDIUM",
      "CRITICAL"
    ],
    "requiredProperties": [],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "parkings",
        "dataType": "Object[]"
      },
      {
        "parameter": "fullParkings",
        "dataType": "String[]"
      },
      {
        "parameter": "availableParkings",
        "dataType": "String[]"
      },
      {
        "parameter": "lowCapacityParkings",
        "dataType": "String[]"
      },
      {
        "parameter": "backToAvailableParkings",
        "dataType": "String[]"
      },
      {
        "parameter": "remainFullParkings",
        "dataType": "String[]"
      },
      {
        "parameter": "alterntativeAvailableParkings",
        "dataType": "String[]"
      }
    ]
  }
}
